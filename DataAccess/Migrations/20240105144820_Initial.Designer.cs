// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240105144820_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.Concrete.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5d7b08b-6c9c-4dbb-99f5-cfe1befa9659"),
                            Name = "Author 1"
                        },
                        new
                        {
                            Id = new Guid("a8305503-a8da-4830-bcec-fa985e594a90"),
                            Name = "Author 2"
                        },
                        new
                        {
                            Id = new Guid("503939b1-a170-4474-aa31-f89f5c878bbb"),
                            Name = "Author 3"
                        });
                });

            modelBuilder.Entity("Models.Entities.Concrete.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ReturnDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BorrowerId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84c52f0a-401d-40d2-80a1-281e48d5c17e"),
                            AuthorId = new Guid("e5d7b08b-6c9c-4dbb-99f5-cfe1befa9659"),
                            BorrowerId = new Guid("4ecc1064-a880-4822-87cc-9c39a224eeaf"),
                            ISBN = "a4378485",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = false,
                            Name = "Book 1",
                            ReturnDate = new DateTimeOffset(new DateTime(2024, 2, 1, 17, 48, 20, 464, DateTimeKind.Unspecified).AddTicks(9523), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("db63310e-3ddc-4715-a9cd-1f0cf4b14a59"),
                            AuthorId = new Guid("a8305503-a8da-4830-bcec-fa985e594a90"),
                            ISBN = "2c47ef87",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = true,
                            Name = "Book 2"
                        },
                        new
                        {
                            Id = new Guid("5c3a0e12-2bc9-45e1-abb3-c3201c94295e"),
                            AuthorId = new Guid("503939b1-a170-4474-aa31-f89f5c878bbb"),
                            BorrowerId = new Guid("a373da2e-3e3f-4b54-b42e-f088123fa2f0"),
                            ISBN = "577e91b9",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = false,
                            Name = "Book 3",
                            ReturnDate = new DateTimeOffset(new DateTime(2023, 12, 29, 17, 48, 20, 464, DateTimeKind.Unspecified).AddTicks(9596), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("b64f2fee-3829-4b9b-af12-bfee40fde344"),
                            AuthorId = new Guid("e5d7b08b-6c9c-4dbb-99f5-cfe1befa9659"),
                            BorrowerId = new Guid("a373da2e-3e3f-4b54-b42e-f088123fa2f0"),
                            ISBN = "646436b2",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = false,
                            Name = "Book 4",
                            ReturnDate = new DateTimeOffset(new DateTime(2024, 1, 30, 17, 48, 20, 464, DateTimeKind.Unspecified).AddTicks(9603), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("765d0dac-fe8c-447d-a238-f2d941a919aa"),
                            AuthorId = new Guid("a8305503-a8da-4830-bcec-fa985e594a90"),
                            ISBN = "b40e31a9",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = true,
                            Name = "Book 5"
                        },
                        new
                        {
                            Id = new Guid("7f039958-66fc-4b1a-9234-a3775c00cbe6"),
                            AuthorId = new Guid("e5d7b08b-6c9c-4dbb-99f5-cfe1befa9659"),
                            BorrowerId = new Guid("4ecc1064-a880-4822-87cc-9c39a224eeaf"),
                            ISBN = "123c832b",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = false,
                            Name = "Book 6",
                            ReturnDate = new DateTimeOffset(new DateTime(2024, 1, 4, 17, 48, 20, 464, DateTimeKind.Unspecified).AddTicks(9617), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("f95b5bbe-daa9-4b45-9db7-dfff0126d384"),
                            AuthorId = new Guid("e5d7b08b-6c9c-4dbb-99f5-cfe1befa9659"),
                            ISBN = "ac0d6041",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = true,
                            Name = "Book 7"
                        },
                        new
                        {
                            Id = new Guid("442daaec-0a77-48b2-b236-140fd3636cdb"),
                            AuthorId = new Guid("a8305503-a8da-4830-bcec-fa985e594a90"),
                            ISBN = "2de3c3f6",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = true,
                            Name = "Book 8"
                        },
                        new
                        {
                            Id = new Guid("094ada91-108c-42d2-876b-a982db803495"),
                            AuthorId = new Guid("503939b1-a170-4474-aa31-f89f5c878bbb"),
                            ISBN = "557aa7f8",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = true,
                            Name = "Book 9"
                        },
                        new
                        {
                            Id = new Guid("444e0e9b-51ce-4776-ab84-0031ae083cc4"),
                            AuthorId = new Guid("e5d7b08b-6c9c-4dbb-99f5-cfe1befa9659"),
                            ISBN = "deea87ff",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = true,
                            Name = "Book 10"
                        },
                        new
                        {
                            Id = new Guid("517c37bb-720c-48d5-8e26-8d2ed1e3933a"),
                            AuthorId = new Guid("a8305503-a8da-4830-bcec-fa985e594a90"),
                            BorrowerId = new Guid("4ecc1064-a880-4822-87cc-9c39a224eeaf"),
                            ISBN = "89154c1a",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = false,
                            Name = "Book 11",
                            ReturnDate = new DateTimeOffset(new DateTime(2024, 1, 28, 17, 48, 20, 464, DateTimeKind.Unspecified).AddTicks(9641), new TimeSpan(0, 3, 0, 0, 0))
                        },
                        new
                        {
                            Id = new Guid("3c042ca7-6ebc-4e8c-80c0-cd65f7ebc021"),
                            AuthorId = new Guid("e5d7b08b-6c9c-4dbb-99f5-cfe1befa9659"),
                            ISBN = "af28af8b",
                            ImageUrl = "images\\book\\default.jpg",
                            IsAvailable = true,
                            Name = "Book 12"
                        });
                });

            modelBuilder.Entity("Models.Entities.Concrete.Borrower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LibraryBorrowerId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryBorrowerId")
                        .IsUnique();

                    b.ToTable("Borrowers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a373da2e-3e3f-4b54-b42e-f088123fa2f0"),
                            LibraryBorrowerId = "a373da2e",
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("4ecc1064-a880-4822-87cc-9c39a224eeaf"),
                            LibraryBorrowerId = "4ecc1064",
                            Name = "Jane Doe"
                        });
                });

            modelBuilder.Entity("Models.Entities.Concrete.Book", b =>
                {
                    b.HasOne("Models.Entities.Concrete.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Concrete.Borrower", "Borrower")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("BorrowerId");

                    b.Navigation("Author");

                    b.Navigation("Borrower");
                });

            modelBuilder.Entity("Models.Entities.Concrete.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Models.Entities.Concrete.Borrower", b =>
                {
                    b.Navigation("BorrowedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
